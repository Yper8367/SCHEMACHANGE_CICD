create or replace TABLE UNITY_STAGING.STG_PLATFORM_SESSION (
  ID VARCHAR(300),
  OFFSET VARCHAR(300),
  KAFKA_CREATED_AT TIMESTAMP_NTZ(9),
  CREATED_AT TIMESTAMP_NTZ(9),
  UPDATED_AT TIMESTAMP_NTZ(9),
  WORKSPACE_ID VARCHAR(300),
  TYPE VARCHAR(300),
  GOAL VARCHAR(300),
  ACTIVE_VERSION VARCHAR(300),
  REFERENCE_SESSION_ID VARCHAR(300),
  RULE_SET_NAME VARCHAR(300),
  PURPOSE VARCHAR(300),
  RESOLUTION VARCHAR(300),
  WORKSPACE_TYPE VARCHAR(300),
  PROJECT_ID VARCHAR(300),
  OBJECTIVE VARCHAR(300),
  REFERENCE_SESSION_TYPE VARCHAR(300),
  COMPANY_ID VARCHAR(300),
  FACT_SUGGESTION_CLOCK VARCHAR(300),
  LOCALE VARCHAR(300),
  DW_CREATED_DATE TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP()
  );
 
   desc table STG_PLATFORM_SESSION;
 
    CREATE OR REPLACE TABLE UNITY_STAGING.STG_PLATFORM_SESSION_ARCHIVE AS SELECT * FROM STG_PLATFORM_SESSION limit 0;
   
     desc table UNITY_STAGING.STG_PLATFORM_SESSION_ARCHIVE;
     
       create or replace TABLE UNITY_CORE.PLATFORM_SESSION (
  ID VARCHAR(300),
  OFFSET VARCHAR(300),
  KAFKA_CREATED_AT TIMESTAMP_NTZ(9),
  CREATED_AT TIMESTAMP_NTZ(9),
  UPDATED_AT TIMESTAMP_NTZ(9),
  WORKSPACE_ID VARCHAR(300),
  TYPE VARCHAR(300),
  GOAL VARCHAR(300),
  ACTIVE_VERSION VARCHAR(300),
  REFERENCE_SESSION_ID VARCHAR(300),
  RULE_SET_NAME VARCHAR(300),
  PURPOSE VARCHAR(300),
  RESOLUTION VARCHAR(300),
  WORKSPACE_TYPE VARCHAR(300),
  PROJECT_ID VARCHAR(300),
  OBJECTIVE VARCHAR(300),
  REFERENCE_SESSION_TYPE VARCHAR(300),
  COMPANY_ID VARCHAR(300),
  FACT_SUGGESTION_CLOCK VARCHAR(300),
  LOCALE VARCHAR(300)),
  DW_CREATED_DATE TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP(),
  DW_UPDATED_DATE TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP()
  );
 
      desc table UNITY_CORE.PLATFORM_SESSION;


GRANT SELECT,INSERT,DELETE ON  TABLE UNITY_STAGING.STG_PLATFORM_SESSION TO ROLE UNITY_DATA_LOADER;
GRANT SELECT,INSERT,DELETE ON  TABLE UNITY_STAGING.STG_PLATFORM_SESSION_ARCHIVE TO ROLE UNITY_DATA_LOADER;
GRANT SELECT,INSERT,DELETE,UPDATE ON  TABLE UNITY_CORE.PLATFORM_SESSION TO ROLE UNITY_DATA_LOADER;


-----------proc----------------------------------

CREATE OR REPLACE PROCEDURE UNITY_CORE.LOAD_DW_PLATFORM_SESSION_SPROC(param VARCHAR)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS CALLER
AS
$$
var procedure_name = 'LOAD_DW_PLATFORM_SESSION_SPROC';
var p = PARAM;
var PROD = 'UNITY_PROD_DB';
var DEV = 'UNITY_DEV_DB';

if (p == 'PROD')
{
       
var res1=snowflake.execute( {sqlText:`USE ${PROD}`} );
}
else if(p == 'DEV' )
{  
var res2=snowflake.execute( {sqlText:`USE ${DEV}`} );
}
else
{
throw "Invalid DATABASE Name.USE DEV FOR UNITY_DEV_DB AND PROD FOR UNITY_PROD_DB ";
//return "Invalid DATABASE Name.USE DEV FOR UNITY_DEV_DB AND PROD FOR UNITY_PROD_DB ";
}

try
{  

var res_archive = snowflake.execute( {sqlText:`
            INSERT INTO UNITY_STAGING.STG_PLATFORM_SESSION_ARCHIVE
            SELECT * FROM UNITY_STAGING.STG_PLATFORM_SESSION;
            `} );
           
            var i_count = snowflake.execute( {sqlText:`
            SELECT COUNT(*) FROM UNITY_CORE.PLATFORM_SESSION;
            `} );
           
            i_count.next();
            var result = "PLATFORM_SESSION: INITIAL COUNT = " + i_count.getColumnValue(1);

var res_merge_ps=snowflake.execute( {sqlText:`MERGE INTO UNITY_CORE.PLATFORM_SESSION  TGT
USING  ( select * from(
select A.*,ROW_NUMBER()over( partition by A.id order by DW_CREATED_DATE desc,KAFKA_CREATED_AT  desc) as rn from UNITY_STAGING.STG_PLATFORM_SESSION  A
)where rn=1) AS SRC
ON (TGT.ID = SRC.ID)
WHEN NOT MATCHED THEN
INSERT
(ID,OFFSET,KAFKA_CREATED_AT,CREATED_AT,UPDATED_AT,WORKSPACE_ID,TYPE,GOAL,ACTIVE_VERSION,REFERENCE_SESSION_ID,RULE_SET_NAME,PURPOSE,RESOLUTION,
WORKSPACE_TYPE,PROJECT_ID,OBJECTIVE,REFERENCE_SESSION_TYPE,COMPANY_ID,FACT_SUGGESTION_CLOCK,LOCALE,DW_CREATED_DATE,DW_UPDATED_DATE)
VALUES
(SRC.ID,SRC.OFFSET,SRC.KAFKA_CREATED_AT,SRC.CREATED_AT,SRC.UPDATED_AT,SRC.WORKSPACE_ID,SRC.TYPE,SRC.GOAL,SRC.ACTIVE_VERSION,SRC.REFERENCE_SESSION_ID,SRC.RULE_SET_NAME,SRC.PURPOSE,SRC.RESOLUTION,
SRC.WORKSPACE_TYPE,SRC.PROJECT_ID,SRC.OBJECTIVE,SRC.REFERENCE_SESSION_TYPE,SRC.COMPANY_ID,SRC.FACT_SUGGESTION_CLOCK,SRC.LOCALE,CURRENT_TIMESTAMP(),CURRENT_TIMESTAMP())
WHEN MATCHED THEN UPDATE SET
TGT.ID= SRC.ID,
TGT.OFFSET= SRC.OFFSET,
TGT.KAFKA_CREATED_AT= SRC.KAFKA_CREATED_AT,
TGT.CREATED_AT= SRC.CREATED_AT,
TGT.UPDATED_AT= SRC.UPDATED_AT,
TGT.WORKSPACE_ID= SRC.WORKSPACE_ID,
TGT.TYPE= SRC.TYPE,
TGT.GOAL= SRC.GOAL,
TGT.ACTIVE_VERSION= SRC.ACTIVE_VERSION,
TGT.REFERENCE_SESSION_ID= SRC.REFERENCE_SESSION_ID,
TGT.RULE_SET_NAME= SRC.RULE_SET_NAME,
TGT.PURPOSE= SRC.PURPOSE,
TGT.RESOLUTION= SRC.RESOLUTION,
TGT.WORKSPACE_TYPE= SRC.WORKSPACE_TYPE,
TGT.PROJECT_ID= SRC.PROJECT_ID,
TGT.OBJECTIVE= SRC.OBJECTIVE,
TGT.REFERENCE_SESSION_TYPE= SRC.REFERENCE_SESSION_TYPE,
TGT.COMPANY_ID= SRC.COMPANY_ID,
TGT.FACT_SUGGESTION_CLOCK= SRC.FACT_SUGGESTION_CLOCK,
TGT.LOCALE= SRC.LOCALE,
TGT.DW_UPDATED_DATE =CURRENT_TIMESTAMP();`} );

           
            var f_count = snowflake.execute( {sqlText:`
            SELECT COUNT(*) FROM UNITY_CORE.PLATFORM_SESSION;
            `} );
           
            f_count.next();
            result += " FINAL COUNT = " + f_count.getColumnValue(1);
           
            res_merge_ps.next();
            result += "\nROWS INSERTED: " + res_merge_ps.getColumnValue("number of rows inserted") +" ROWS UPDATED: " + res_merge_ps.getColumnValue("number of rows updated") ;

           
            result=result.replace(/'/g,"''");
var res_log=snowflake.execute( {sqlText:`INSERT INTO UNITY_STAGING.LOG(PROCEDURE_NAME, PARAMETER_PASSED, RESULT_LOG, DATE_TIME) VALUES
 ('${procedure_name}','${p}','${result}',CURRENT_TIMESTAMP)`} );
return result;
           
 }
catch(err)
{
result =  " Failed: Code:  ERROR_1 WHILE MERGING THE DATA " + err.code + "\n  State: " + err.state;
result += "\n  Message: " + err.message;
result += "\nStack Trace:\n" + err.stackTraceTxt;
            result=result.replace(/'/g,"''");

       try
{
 var res_log=snowflake.execute( {sqlText:`INSERT INTO UNITY_STAGING.LOG(PROCEDURE_NAME, PARAMETER_PASSED, RESULT_LOG, DATE_TIME) VALUES
 ('${procedure_name}','${p}','${result}',CURRENT_TIMESTAMP)`} );
}
catch(e)
{
                result +=  "\n "+"Failed: Code:  ERROR_2 while inserting data to LOG table  " + e.code + "\n  State: " + e.state;
result += "\n  Message: " + e.message;
result += "\nStack Trace:\n" + e.stackTraceTxt;
}
throw result;
           
}
$$;
       

---FOR TASK-----------
CREATE OR REPLACE TASK UNITY_CORE.TASK_PLATFORM_SESSION
 WAREHOUSE = COMPUTE_WH
 SCHEDULE = 'USING CRON 0 0,6,12,18 * * * America/Los_Angeles'
AS
CALL UNITY_CORE.LOAD_DW_PLATFORM_SESSION_SPROC('DEV');


ALTER TASK TASK_PLATFORM_SESSION suspend;
ALTER TASK UNITY_CORE.TASK_PLATFORM_SESSION RESUME;